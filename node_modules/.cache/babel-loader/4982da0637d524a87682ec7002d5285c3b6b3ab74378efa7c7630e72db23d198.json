{"ast":null,"code":"import React,{useState}from\"react\";import{Box,Typography,TextField,Button,Paper}from\"@mui/material\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[userInput,setUserInput]=useState(\"\");const[chatLog,setChatLog]=useState([]);// Stores all chat messages\nconst handleSubmit=async e=>{e.preventDefault();// Add user input to chat log\nsetChatLog([...chatLog,{role:\"user\",content:userInput}]);try{// Call the Azure Function API\nconst response=await fetch(\"https://white-island-031a8a810.4.azurestaticapps.net/api/query\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({query:userInput})});if(!response.ok){throw new Error(`Error: ${response.statusText}`);}const data=await response.json();// Add assistant response to chat log\nsetChatLog(prev=>[...prev,{role:\"assistant\",content:data.result||`Hello, ${userInput}. This HTTP triggered function executed successfully.`}]);}catch(error){console.error(\"Error calling Azure Function:\",error);setChatLog(prev=>[...prev,{role:\"assistant\",content:\"An error occurred. Please try again.\"}]);}// Clear user input\nsetUserInput(\"\");};return/*#__PURE__*/_jsxs(Box,{sx:{maxWidth:\"800px\",margin:\"0 auto\",padding:\"20px\",display:\"flex\",flexDirection:\"column\",gap:\"20px\"},children:[/*#__PURE__*/_jsxs(Paper,{elevation:3,sx:{padding:\"20px\"},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",gutterBottom:true,children:\"Welcome to Inquery v3\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body1\",children:\"Use the chat window below to ask your questions. The chat log will display the conversation, and the results will be dynamically updated as part of the chat.\"})]}),/*#__PURE__*/_jsxs(Paper,{elevation:3,sx:{padding:\"20px\"},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",gutterBottom:true,children:\"Chat Window\"}),/*#__PURE__*/_jsx(Box,{sx:{maxHeight:\"300px\",overflowY:\"auto\",padding:\"10px\",border:\"1px solid #ccc\",borderRadius:\"4px\",marginBottom:\"10px\"},children:chatLog.map((entry,index)=>/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",sx:{textAlign:entry.role===\"user\"?\"right\":\"left\",// Align user messages to the right\ncolor:entry.role===\"user\"?\"blue\":\"green\",marginBottom:\"5px\",display:\"block\"// Ensures messages are block elements for alignment\n},children:[/*#__PURE__*/_jsx(\"strong\",{children:entry.role===\"user\"?\"You:\":\"Assistant:\"}),\" \",entry.content]},index))}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(TextField,{fullWidth:true,variant:\"outlined\",label:\"Enter your question\",value:userInput,onChange:e=>setUserInput(e.target.value),sx:{marginBottom:\"10px\"}}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",type:\"submit\",fullWidth:true,children:\"Submit\"})]})]})]});}export default App;","map":{"version":3,"names":["React","useState","Box","Typography","TextField","Button","Paper","jsx","_jsx","jsxs","_jsxs","App","userInput","setUserInput","chatLog","setChatLog","handleSubmit","e","preventDefault","role","content","response","fetch","method","headers","body","JSON","stringify","query","ok","Error","statusText","data","json","prev","result","error","console","sx","maxWidth","margin","padding","display","flexDirection","gap","children","elevation","variant","gutterBottom","maxHeight","overflowY","border","borderRadius","marginBottom","map","entry","index","textAlign","color","onSubmit","fullWidth","label","value","onChange","target","type"],"sources":["M:/inquery/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Box, Typography, TextField, Button, Paper } from \"@mui/material\";\n\nfunction App() {\n  const [userInput, setUserInput] = useState(\"\");\n  const [chatLog, setChatLog] = useState([]); // Stores all chat messages\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Add user input to chat log\n    setChatLog([...chatLog, { role: \"user\", content: userInput }]);\n\n    try {\n      // Call the Azure Function API\n      const response = await fetch(\"https://white-island-031a8a810.4.azurestaticapps.net/api/query\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ query: userInput }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      // Add assistant response to chat log\n      setChatLog((prev) => [\n        ...prev,\n        { role: \"assistant\", content: data.result || `Hello, ${userInput}. This HTTP triggered function executed successfully.` },\n      ]);\n    } catch (error) {\n      console.error(\"Error calling Azure Function:\", error);\n      setChatLog((prev) => [\n        ...prev,\n        { role: \"assistant\", content: \"An error occurred. Please try again.\" },\n      ]);\n    }\n\n    // Clear user input\n    setUserInput(\"\");\n  };\n\n  return (\n    <Box\n      sx={{\n        maxWidth: \"800px\",\n        margin: \"0 auto\",\n        padding: \"20px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: \"20px\",\n      }}\n    >\n      {/* Static Content Section */}\n      <Paper elevation={3} sx={{ padding: \"20px\" }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Welcome to Inquery v3\n        </Typography>\n        <Typography variant=\"body1\">\n          Use the chat window below to ask your questions. The chat log will\n          display the conversation, and the results will be dynamically updated\n          as part of the chat.\n        </Typography>\n      </Paper>\n\n      {/* Chat Window Section */}\n      <Paper elevation={3} sx={{ padding: \"20px\" }}>\n        <Typography variant=\"h5\" gutterBottom>\n          Chat Window\n        </Typography>\n        <Box\n        sx={{\n          maxHeight: \"300px\",\n          overflowY: \"auto\",\n          padding: \"10px\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"4px\",\n          marginBottom: \"10px\",\n        }}\n      >\n        {chatLog.map((entry, index) => (\n          <Typography\n            key={index}\n            variant=\"body2\"\n            sx={{\n              textAlign: entry.role === \"user\" ? \"right\" : \"left\", // Align user messages to the right\n              color: entry.role === \"user\" ? \"blue\" : \"green\",\n              marginBottom: \"5px\",\n              display: \"block\", // Ensures messages are block elements for alignment\n            }}\n          >\n            <strong>{entry.role === \"user\" ? \"You:\" : \"Assistant:\"}</strong> {entry.content}\n          </Typography>\n        ))}\n      </Box>\n        <form onSubmit={handleSubmit}>\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            label=\"Enter your question\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            sx={{ marginBottom: \"10px\" }}\n          />\n          <Button variant=\"contained\" type=\"submit\" fullWidth>\n            Submit\n          </Button>\n        </form>\n      </Paper>\n    </Box>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}